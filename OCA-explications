https://drive.google.com/file/d/13yuupet1o_oysdEjM99avsT5aPqs4DY9/view

https://iiw.idcommons.net/4A/_Overlays_Capture_Architecture_(OCA):_A_global_solution_for_data_capture_and_semantic_harmonization


Good. Great. Okay. All right. Welcome to the overlays capture architecture session. So overlays capture architecture is a, it's a, an interoperable, data capture structure that can facilitate a unified data language. And it can be used as a for global data capture. So, my name is Paul Knowles, I'm the I'm one of the co founders of the human Colossus Foundation, which is a tech Technology Foundation based in Geneva, Switzerland. And, and really, the role of the foundation is to, to MIT together to take take different technologies and try and knit it together into into the formation of a decentralized data economy. So in that, in that ecosystem, SSI as a part of it. But what we're talking about now is is more the data capture side of the model. So I'm also the chair of the hyper ledger in the semantics work group. And in that work group, we basically talk about anything that is SSI. related, but more on the on the semantic side. And when I say semantics, for people that don't know that term, it's really semantics as is what gives meaning to data. So it can be things like, you know, giving data context is probably a good way to put it. Okay, so big, big blue circle, I just wanted to show you kind of where these pieces fit in. So this is a decentralized data network. And in that network, you can split it into two. So on the top is, whenever people talk about decentralized identity, that fits into the credential part of the model, which is all about data entry. And in that space, you want to make sure that any data that is entered into the network comes from an assured source. So that's that. So in this talk talk, we're going to be talking about decentralized semantics, and and data capture, which falls into the female side of the model, which is the schema side of the model. And, and we'll be talking about the overlays data capture architecture in particular. So for those of you that don't know, what a schema is, it's a machine readable definition of the semantics of a data structure. And in kind of plain English, the way that I would explain it is a digital representation of a data capture form. So in the overlays capture architecture, we we take a traditional form, if you like or schema, and we we split it into different different data objects depending on on the task that it performs for the schema. So so the base object has a schema base. And that's a stable base object that defines a single set of data in its purest form. That's providing standard base from which to decentralized data. So in a schema base, all you have is you have a little bit of metadata. You've got a list of attribute names and types. And there's also a flagging block in the schema base where you can flag any attributes that could potentially unblind the identity of an entity or of a government entity. So I'll show you what that looks like in a minute.
And then, what is an overlay? So you many of you probably heard of overlays, a lot of people are now talking about them, fairly, fairly openly. Overlays were conceived that II W in 2018. A conversation between myself Nathan George, the CTO of sovereign and Matthew hailstone. A is a software architect at Brigham Young University. And we came came up with this idea of overlays, which basically add contextual or conditional information to a schema base. So in real terms, what does that look like? It so each so if you think of all the tasks that are in a traditional schema, you would have things like labels and predefined entries and character setting coding and maybe some, some information for the for the users and informational pros. So all of those things that I mentioned, they're all separate data objects that are linked to the schema base. So I'll show you what that looks like. But the real advantage of of overlays is that
within within, within a local web of trust, or a consortium, for instance, competitors can be using the same schema, for similar use case, and any slight change that they might need, they can just put in their own set of overlays onto that schema base. And they don't have to change the base object. So So the advantage of doing that is that when data is captured through that structure, so you're basically starting to unify a data language. So these schema bases X, like kind of Hoover's a, everything is kind of filtered into in towards the schema base. So this is what it looks like visually. So as I say, these are all the different overlays. And they all have different tasks. So you've got some core overlays their character entry label format, I'll explain them in a little bit. And then some optional ones as well. And then these are, these are some of the tasks that that that, that we've separated from the schema base. So I'll go through just maybe just the core ones here, so that Robert has plenty of time to go through the demo. So the core ones are the ones in the middle there, a character overlay. So a character overlay is, is where you can define the character set of the keys on your keyboard. So it's a so it's really cool. So at the moment, say you want wanted to do, you're doing a clinical trial, and you and a company wanted to build an adverse event schema, you know, there's nothing stopping that schema being used for Arabic language or, or, or Chinese character characters. Because they can just swap out the character overlay, which defines the character set of the keyboard. The other ones in the chord core, or the the entry overlay, which is for predefined entries. So things like if you're collecting gender, you know, male, female, those would be predefined entries there in a separate data object labels, human readable labels and category labels. And then format. So if you had like a date, you know, you could have DD, mm, yy, yy, you know, any kind of formats, you can, you can define in the format overlay. The other ones, I won't go into too much. But as you can see, there's there's plenty of flexibility and interoperability within the structure. So all of these overlays, types that you see here, these are all for the issuer. So someone issuing a schema they have they would have access to to all of this functionality. So why is OCI useful? I won't read all of the pros on here. But very briefly, it's great for data pooling, because, as I said, you're starting to unify a data language. So if you want to collect data from from people within the Consortium, or going through the same scheme and basis, if you go to decentralize that data, so beautifully harmonized. So, you know, third party, researchers and stuff can do great analytics and statistics on harmonized data, stable schema bases, as I say, rather than having to reissue schema all the time, for similar use cases, they can, people can just introduce a different set of overlays instead. So the schema bases themselves remains remain stable. flagged attributes for encryption, within the within the schema base, you can flag any any attributes that could potentially unblind the identity of an entity. And we use the blinding identity taxonomy as a reference of what to flag the blinding identity taxonomy resides at Kantara initiative, which is a nonprofits standards, standardization body for identity identity standards. So it lives with them. Data decentralization, obviously, very similar to to the data pooling thing that I mentioned. And finally, the big one for for companies is internationalization. So that kind of goes into that example that I mentioned with, you know, using Arabic language or Chinese language or whatever. So those are the main benefits. There's one, there's one overlay that we reserved for the holder. And that's a sensitive overlay. And to give you an example of where this might be useful, the example I always use is gender. So gender is usually just male female, which is a broad enough subset to not be sensitive. But then in the case of Thailand, in Thailand, I'm told that 818 genders are recognized by the by the Thai government. And obviously, within those genders, the subset start to get very narrow, and then it can be it start to become sensitive. So in the case of a Thai resident, they could put a sensitive overlay on a Data Vault, for gender so that whenever anybody is asking for gender from that person, it's automatically flagged as being sensitive to that to that holder.
Okay, so yeah, I mentioned the blinding identity taxonomy. The reason that why we spearheaded that was when General Data Protection Regulation came out. It was great from a legal perspective. But we found from a technical implementation perspective, it wasn't granular enough to to know what a developer should flag as as being sensitive. So we spearheaded the blinding identity taxonomy, this went through the identity community through some of the big data community, this is now a list of 49 elements that could potentially unblind the identity of an entity. And this is what it looks like. So as I say, this resides with Kantara. It's, we used to kind of say that it was personally identifiable information, but it's actually a little bit broader than that. In that it's, it's more potentially personally identifiable information. So you'll see there's a couple of elements in here things like freeform text fields, and unstructured data, the last element in the list, which is very broad, but obviously, freeform text fields are dangerous, because we don't know what people are entering in those fields. So we just say if it's freeform text fields, and flaggers sensitive. The other interesting one in here, I suppose is dates and timestamps, we've put a a broad caveat on that as well. Date of birth is definitely PII. But there's some other dates that might not be quite as sensitive as date of birth. But we'd say that if it's a date, if you're unsure if it's sensitive flag, it is always better to flag than not flag. Okay. Okay, so creating a schema base with linked overlays. So we'll take a look at the schema base for First of all, as I say there's attribute flagging within the schema base. So this is some code. This is what a schema base looks like. As I mentioned, there's a PIO, I should say, potentially PII flagging block there at that at the end. So in this case, you can see we've, we're flagging a bunch of four, four attributes are being flagged as they they're, they're matched to elements in the blinding identity taxonomy. There's some metadata at the top here, which gives the schema base some context. And apart from that, it's literally just attributes, names and attribute types. So it's a very basic structure. And this can remain pretty stable for for any, any similar use cases. So in this case, we're looking at a training certification schema schema base. So that's the metadata. Okay. And then, so rather than go through all the overlays, I've just taken a few overlays, because these are the ones that Robert will, will, that you'll see in Roberts demo. So we're looking at so the I explained the four core overlays before, the only one I didn't mention was the information overlay. And the information overlay is really when you if you think of like an application on your phone, you know, where you get the the circle with the little AI information. thing and you kind of you click on it and brings up a little bit of information about the Gibson user instructions. That's what information over layers. Okay. Okay, so this is a character, character setting coding overlays that I mentioned. So again, there's some metadata at the top here. And then you'll see here in the schema base, there's a hash link here and this is what But this is the linking mechanism that links to the schema base. And so that's the overlay metadata. That's the hash link, which goes to the schema base. And then you'll see here, there's also in this particular overlay, there's a default character encoding. So UTF eight is kind of fairly standard. But if you have some, some more rare, a character set encoding that's not used quite as much, then you can, you can change changes over there.
Okay. And then we've got the format overlay. So a format overlay, like I mentioned before, is where you, you specify like a date time format, in this case, on the issuance date, you've got mmm yyyy. Again, you've got some master data, that's your linking mechanism. So this, this is obviously the exactly the same hash link as the as the previous overlay, so it links to the same schema base. So all of these different different tasks that are usually involved in the schema are all separate data objects, so you can just chop and change them as you as you wish. Okay, and then we've got a label overlay, I'm sorry that the text is a little small. But this overlays, there's always a, there's always a little bit more information here than the other overlays, again, the so this is for like a human readable labels. So in here, you've got, again, a bit of metadata, you've got the schema base, again, in this overlay, you can you can define the language. So in this case, it's it's English to US version of the language. And yep, so in here, you've got attribute labels, and then you're defining and labeling categories as well. Okay, and then find the, this is the last one, I'll show you, I believe. And this is an entry overlay. So for your predefined entries. So in here, you can you've got some metadata, you've got the schema, base linking, linking mechanism. And then you've got, again, you can do language here. So you can do your predefined field values in different languages as well. Okay, so that's, oh, sorry, one more, this is the information overlay. Again, this is that little eye on the application that you'll see. Same again, we've got metadata, you've got the schema base linking mechanism, you've got also the language in there as well. Okay, so that's kind of so you kind of get an idea of what the overlays are. They're fairly simple structures on their own, but so when you add them to the schema base, the schema can become really rich. And there's, there's a bunch of overlays that we're looking at there in the pipeline as well. One of the interesting ones that we're talking about at the moment is when you flag attributes in the schema base, we're looking at a risk overlay. So you might have something like date of birth, which is flagged as, as PII. And that might have a sensitive level sensitivity level of say, six, whereas you know, a visit to the doctor might have a sensitivity level of two. So you can kind of get a little bit more granular with the information that you're collecting for risk in that case. And for that particular overlay, it becomes really interesting if you're using different schema from different industries, and you're looking to kind of, you know, use parts of those schemas to get some bigger schema, if you like. And then you can kind of use these risks these risks as a as a point of potential correlation, where you could use some algorithm to see what the potential risk is for a cross cross correlation between industries so they can become really powerful, these overlays.
Okay, I just wanted to say, with, I'm going to have a quick look at object interoperability within an industry sector. So this is a schema base, I wanted to just show you what a classification meta tag is. So here, you'll see there's a classification code here. This is a global industry classification code, that Guix code and I'll show you what that looks like global industry classification standard code. So this this basically says what industry this schema has been issued from. So in this case, this is an eight digit code goes quite granular rate from a two digit sector code for a consumer discretionary right down to an eight digit code, which is education services. So you remember that This schema that we're demoing here is for training certification. So that falls under Education Services. This is the industry sector categorization. This is just one option you can use, you can use pretty much whatever classification standard you want to that, that suits your use case. This is obviously a very common one of use. But yeah, as I say, You're not limited to using this, you can use other other standards. Okay, so, visually, I just wanted to show you what this looks like if you swap out some of the overlays. So in this particular example, you've got, you've got three English language overlays there and information, label and entry overlay. So what you can do is say, say, you had the application was being fired up and in for a French resident, you know, you could take those three overlays out, and you could swap them in for for French, right? So they're there, they've been swapped, it swapped, and you've got three, three French labels. So now that you're using exactly the same schema base, but on the application layer, it's gone from English to French. So on that note, I'll let you see it working in real terms. So I'm going to hand it over to my my colleague, Robert wiki. Robert, do you want to quickly introduce yourself? Yes, sure. So hello, everyone. My name is Robert. I'm one of the cofounders of the human Colossus Foundation, as well, one of the findings, sponsor of the hyper ledger Aires and within the industry for a couple of years already working with decentralized technologies and identity. In the human Colossus foundation, I responsible for the for the technical board, where we are shaping the the components of the decentralized data economy. And today, I would like to show you a couple of them. So let me I'll stop sharing. Yeah, yeah, I can stop sharing. Okay, my friend. So your
screen. Okay, let me know if you can see it. Yeah, we can sit. Okay, good. So basically, this one we are building the human Colossus Foundation is a kind of sandbox for the decentralized data economy components. We already have couple of them. More will come. And today I will show you how to OCA can facilitate the data transportation and data capture in connection with the with the VC. So there's a couple of tools already available. One of them is the OCA editor, which is simple UI, which allows you to create those, those schemas together with the overlays. Here's a preview of the schema, which we'll use today, it's a couple of fields, which normally you can you, you, you know, drag and drop stuff here, you name them properly, you can, you can set all the attributes for all the labels, encodings values, and so on and so on, mark them as a PII or not. So this is a simple use of let's say, user friendly or semi user friendly, because as you can see, the designs are coming from the engineer, so we still need to improve a lot of stuff. But overall, it allows you to easily generate those schemas without knowing you know, anything about the JSON or JSON LD or any stuff related with them with the low level things. And this would, can be easily done. So obviously, as you're ready, you can export it in the form of the JSON file, which later on you can use it and within your application or are distributed, or you can publish it. And what publishing means is basically you're putting that in one of the OCA repository. Currently, though, one of the repository which we created this is very simple one. It's a simple set of API's, which allows you to throw OCA into repository and retrieve it to different namespaces. MD arise. And the DRI is decentralized resource identifier. So it's basically a hash of the content right? So this storage is immutable. All the objects are immutable. And through the linking mechanism, you can be 100% sure that nobody tamper down nobody changed them, nobody modify them, you can verify that actually those are the informations which you're looking for and you want to rely on and and this process is very important because We are talking about immutability of those objects and the assurance later on in the process of, for example, tie, tying them to the credentials and, and still being able to verify that the data were which is attached to the VC is coming from the from the trusted source. So yeah, let me see, I think I have here yet here is an example, we will make it a little bit bigger. So you can actually see behind this repository, it's elastic search engine, which allows you to easily index all the elements or the objects and through the hashes, you can verify the content. So there is nothing means that it doesn't matter where is the location of those overlays. And, and schemas can be on the public on the private network, it could be distributed. Basically, from the perspective of the whole architecture, the assumption is that we are not telling you how to define or what to put into the schemas, we just creating this meta language, which allows you to create created according to your standards, according to your expertise, you know, better what is suitable for your industry or your specific use case. But by using this meta language, and this whole architecture, it allows you to let others understand what you create it and have machine readable context for the for the semantic. So as you can see here, the construct shows here that there is a schema base with this hash, which is linked with those overlays here. And here is basically the list of all the objects here we have an example of the overlays, which is a label overlay with all the attributes, categories, labels for the categories, categories, attributes and the linkage between them. And obviously, for each one is this what what Paul show you on the slides, there is always a tight link to that to the schema base. So you can be sure that this overlay is meant for that specific schema base.
So this is how it looks like this OCA repository, then we'll go to the verification or to verify our credentials. So here I have a modified version of the era's toolbox, which is running in the browser directly. It's, it's it's hosted on my machine, but we are planning to provide this as a form of TDA within our sandbox. So basically, everybody will be able to create his own wallet and play with the credentials and the association and other building blocks which we are preparing. So I have to two entities here there is a university hospital and John Smith. Basically, I would like to show you a couple of things here. So first of all, there is a connection established to the date column between those agents, there is some background stuff already prepared for that. And now let's assume that the University of university hospital would like to issue a credential to to John Smith, and find a training certification. So this what is happening here is that this this, this TDA, as they call it, so trusted digital assistant, what it does, is providing you the information about all the available schema, so all the repositories with the OCS, which you add it. So it could be for example, a consortium repository, which is meant for specific issuance, or issuers. And basically what it does, it tells you which schema basis you're able to issue. So obviously, you can extend it by any Republic or private repository as you wish you could create your own collection of the specific schemas. It doesn't, doesn't have to be schema on the ledger as it is currently in most of the SSI solutions. Because as soon as you have immutability of that object, it doesn't matter where it is. Obviously, you can use a verbal credentials to prove who actually issue that to verify that it comes from trusted entity. But that's another story. So here we can preview how it looks like. So that's the schema which, which you saw in the presentation as well in the repository. Here we have all the attributes. Obviously here you have this concept of the overlays in the presentation layer where you can switch between the languages, you can see that the labels changes and the and the information for the for the specific attributes. So we'll issue that credential right now to the John So, obviously to the to the issuing process based on the on the labels or the sorry on the language which you will choose to modify the overlays here and then based on that you have a different for example entries and obviously the labels as we said. So, let me quickly just fill that out
